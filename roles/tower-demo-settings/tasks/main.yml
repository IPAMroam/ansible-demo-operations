---
- name: Generate a demo SSH key
  shell: ssh-keygen -b 2048 -t rsa -f /home/admin/.ssh/demo_rsa -q -N ""
  args:
    creates: /home/admin/.ssh/demo_rsa

- name: Grab the public key for the keypair
  slurp:
    src: /home/admin/.ssh/demo_rsa.pub
  register: demo_key

- name: Create a demo AWS keypair
  ec2_key:
    aws_access_key: "{{ ansible_aws_access_key }}"
    aws_secret_key: "{{ ansible_aws_secret_key }}"
    aws_region: "{{ ansible_aws_region }}"
    name: "{{ demo_keypair_name }}"
    key_material: "{{ demo_key.content | b64decode }}"
    state: present

- name: Create the sales demo organization
  shell: >
    tower-cli organization create
    --name "Ansible Sales Demo"
    --description "Shared org with reusable demos."

- name: Create all sales demo teams
  shell: >
    tower-cli team create
    --name "{{ item.name }}"
    --description "{{ item.description | default('') }}"
    --organization "Ansible Sales Demo"
  with_items: "{{ sales_demo_teams }}"

- name: Create the demo machine credential
  shell: >
    tower-cli credential create
    --name "Demo SSH Key"
    --description "SSH key used for shared demos."
    --organization "Ansible Sales Demo"
    --kind ssh
    --ssh-key-data /home/admin/.ssh/demo_rsa
    --force-on-exists

- name: Ensure all users have access to the demo machine credential
  shell: >
    tower-cli role grant
    --credential "Demo SSH Key"
    --team "Sales Demo User"
    --type use

- name: Create the demo cloud credential
  shell: >
    tower-cli credential create
    --name "Demo Amazon Web Services"
    --description "AWS cloud credential used for shared demos."
    --organization "Ansible Sales Demo"
    --kind aws
    --username "{{ ansible_aws_access_key }}"
    --password "{{ ansible_aws_secret_key }}"
    --force-on-exists

- name: Ensure all users have access to the demo cloud credential
  shell: >
    tower-cli role grant
    --credential "Demo Amazon Web Services"
    --team "Sales Demo User"
    --type use

- name: Create the demo admin machine credential
  shell: >
    tower-cli credential create
    --name "Demo Admin SSH Key"
    --description "SSH key used for shared demo administration."
    --organization "Ansible Sales Demo"
    --kind ssh
    --username admin
    --ssh-key-data /home/admin/.ssh/id_rsa
    --force-on-exists

- name: Ensure all admins have access to the demo admin machine credential
  shell: >
    tower-cli role grant
    --credential "Demo Admin SSH Key"
    --team "Sales Demo Admin"
    --type use

- block:
    - name: Copy the demo admin playbooks into place
      copy:
        src: ansible-demo-admin
        dest: /var/lib/awx/projects
        owner: awx
        group: awx

    - name: Ensure the demo admin project group_vars directory exists
      file:
        path: /var/lib/awx/projects/ansible-demo-admin/group_vars
        owner: awx
        group: awx
        state: directory

    - name: Ensure the demo admin group_vars are correct
      copy:
        dest: /var/lib/awx/projects/ansible-demo-admin/group_vars/all.yml
        content: |
          ansible_aws_region: {{ ansible_aws_region }}
        owner: awx
        group: awx
  become_user: root

- name: Create the sales demo admin project
  shell: >
    tower-cli project create
    --name "Ansible Tower Demo Admin"
    --description "Management playbooks for Ansible Tower shared demos."
    --organization "Ansible Sales Demo"
    --scm-type manual
    --local-path ansible-demo-admin

- name: Ensure all admins have access to the admin project
  shell: >
    tower-cli role grant
    --project "Ansible Tower Demo Admin"
    --team "Sales Demo Admin"
    --type use

- name: Create a local inventory for admin usage
  shell: >
    tower-cli inventory create
    --name "Local Tower Management"
    --description "Inventory that just contains localhost"
    --organization "Ansible Sales Demo"

- name: Ensure the demo admin team has access to the local inventory
  shell: >
    tower-cli role grant
    --inventory "Local Tower Management"
    --team "Sales Demo Admin"
    --type admin

- name: Add the Tower server to local inventory
  shell: >
    tower-cli host create
    --name "{{ ansible_host }}"
    --inventory "Local Tower Management"

- name: Create job template for onboarding demo users
  shell: >
    tower-cli job_template create
    --name "Add Demo User"
    --description "Create a user that can run the shared job templates."
    --job-type run
    --project "Ansible Tower Demo Admin"
    --inventory "Local Tower Management"
    --playbook add-demo-user.yml
    --machine-credential "Demo Admin SSH Key"
    --cloud-credential "Demo Amazon Web Services"

- name: Ensure demo admins can run the onboarding job template
  shell: >
    tower-cli role grant
    --job-template "Add Demo User"
    --team "Sales Demo Admin"
    --type execute

- name: Create job template for onboarding demo admins
  shell: >
    tower-cli job_template create
    --name "Add Demo Admin"
    --description "Add a user that can run the admin job templates."
    --job-type run
    --project "Ansible Tower Demo Admin"
    --inventory "Local Tower Management"
    --playbook add-demo-admin.yml
    --machine-credential "Demo Admin SSH Key"
    --cloud-credential "Demo Amazon Web Services"

- name: Ensure demo admins can run the onboarding job template
  shell: >
    tower-cli role grant
    --job-template "Add Demo Admin"
    --team "Sales Demo Admin"
    --type execute

- name: Ensure the sales demo admin team has admin access
  shell: >
    tower-cli role grant
    --project "Ansible Tower Demo Admin"
    --team "Sales Demo Admin"
    --type admin

- name: Create all sales demo projects
  shell: >
    tower-cli project create
    --name "{{ item.name }}"
    --description "{{ item.description | default('') }}"
    --organization "Ansible Sales Demo"
    --scm-type "{{ item.scm_type | default('git') }}"
    --scm-url "{{ item.scm_url }}"
    --scm-branch "{{ item.scm_branch | default('master') }}"
    --scm-clean "{{ item.scm_clean | default('yes') | bool }}"
    --scm-delete-on-update "{{ item.scm_delete_on_update | default('yes') | bool }}"
    --scm-update-on-launch "{{ item.scm_update_on_launch | default('yes') | bool }}"
    --monitor
  with_items: "{{ sales_demo_projects }}"

- name: Ensure all project roles are granted
  shell: >
    tower-cli role grant
    --project "{{ item.0.name }}"
    --team "{{ item.1.name }}"
    --type "{{ item.1.type }}"
  with_subelements:
    - "{{ sales_demo_projects }}"
    - team_roles

- name: Create all sales demo job templates
  shell: >
    tower-cli job_template create
    --name "{{ item.name }}"
    --description "{{ item.description }}"
    --job-type "{{ item.job_type }}"
    --project "{{ item.project }}"
    --playbook "{{ item.playbook }}"
    --machine-credential "{{ item.machine_credential }}"
    --cloud-credential "{{ item.cloud_credential }}"
    --limit "{{ item.limit | default('') }}"
    --extra-vars "{{ item.extra_vars | default('foo: bar') | from_yaml | to_yaml }}"
    --ask-inventory-on-launch "{{ item.ask_inventory_on_launch | default('no') | bool }}"
    --ask-job-type-on-launch "{{ item.ask_job_type_on_launch | default('no') | bool }}"
  with_items: "{{ sales_demo_job_templates }}"

- name: Ensure all job template roles are granted
  shell: >
    tower-cli role grant
    --job-template "{{ item.0.name }}"
    --team "{{ item.1.name }}"
    --type "{{ item.1.type }}"
  with_subelements:
    - "{{ sales_demo_job_templates }}"
    - team_roles
