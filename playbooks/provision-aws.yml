---
- name: Provision AWS Resources
  hosts: localhost
  connection: local
  gather_facts: no
  become: no
  tasks:
    - name: Create the demo VPC
      ec2_vpc:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        aws_region: "{{ ansible_aws_region }}"
        cidr_block: "{{ vpc_cidr }}"
        internet_gateway: yes
        subnets:
          - az: "{{ public_subnet_a_az }}"
            cidr: "{{ public_subnet_a_cidr }}"
            resource_tags:
              Name: "{{ vpc_name }}-public-subnet-a"
              Environment: "{{ environment_name }}"
          - az: "{{ public_subnet_b_az }}"
            cidr: "{{ public_subnet_b_cidr }}"
            resource_tags:
              Name: "{{ vpc_name }}-public-subnet-b"
              Environment: "{{ environment_name }}"
          - az: "{{ public_subnet_c_az }}"
            cidr: "{{ public_subnet_c_cidr }}"
            resource_tags:
              Name: "{{ vpc_name }}-public-subnet-c"
              Environment: "{{ environment_name }}"
        route_tables:
          - subnets:
              - "{{ public_subnet_a_cidr }}"
              - "{{ public_subnet_b_cidr }}"
              - "{{ public_subnet_c_cidr }}"
            routes:
              - dest: "{{ public_internet_cidr }}"
                gw: igw
        resource_tags:
          Name: "{{ vpc_name }}"
          Environment: "{{ environment_name }}"
        wait: yes
        state: present
      register: vpc

    - name: Gather facts about public subnet a
      ec2_vpc_subnet_facts:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        aws_region: "{{ ansible_aws_region }}"
        filters:
          vpc-id: "{{ vpc.vpc_id }}"
          availability-zone: "{{ public_subnet_a_az }}"
      register: public_subnet_a

    - name: Gather facts about public subnet b
      ec2_vpc_subnet_facts:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        aws_region: "{{ ansible_aws_region }}"
        filters:
          vpc-id: "{{ vpc.vpc_id }}"
          availability-zone: "{{ public_subnet_b_az }}"
      register: public_subnet_b

    - name: Gather facts about public subnet c
      ec2_vpc_subnet_facts:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        aws_region: "{{ ansible_aws_region }}"
        filters:
          vpc-id: "{{ vpc.vpc_id }}"
          availability-zone: "{{ public_subnet_c_az }}"
      register: public_subnet_c

    - set_fact:
        public_subnet_a_id: "{{ public_subnet_a.subnets[0].id }}"
        public_subnet_b_id: "{{ public_subnet_b.subnets[0].id }}"
        public_subnet_c_id: "{{ public_subnet_c.subnets[0].id }}"
        vpc_id: "{{ vpc.vpc_id }}"

    - name: Create the tower security group
      ec2_group:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        aws_region: "{{ ansible_aws_region }}"
        name: "tower-{{ environment_name }}"
        description: All rules needed by Ansible Tower
        vpc_id: "{{ vpc.vpc_id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ public_internet_cidr }}"
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: "{{ public_internet_cidr }}"
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: "{{ public_internet_cidr }}"
        rules_egress:
          - proto: all
            from_port: -1
            to_port: -1
            cidr_ip: "{{ public_internet_cidr }}"
      register: tower_security_group

    - name: Create the tower db security group
      ec2_group:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        aws_region: "{{ ansible_aws_region }}"
        name: "tower-db-{{ environment_name }}"
        description: Allow Tower servers
        vpc_id: "{{ vpc.vpc_id }}"
        rules:
          - proto: tcp
            from_port: "{{ tower_db_port }}"
            to_port: "{{ tower_db_port }}"
            group_name: "tower-{{ environment_name }}"
      register: tower_db_security_group

    - name: Create a subnet group
      rds_subnet_group:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        aws_region: "{{ ansible_aws_region }}"
        name: "tower-{{ environment_name }}"
        description: Subnet group to use for MGMT SA Tower demo setup
        subnets:
          - "{{ public_subnet_a_id }}"
          - "{{ public_subnet_b_id }}"
          - "{{ public_subnet_c_id }}"
        state: present

    - name: Create an RDS PostgreSQL database
      rds:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        aws_region: "{{ ansible_aws_region }}"
        db_name: "{{ tower_db_name }}"
        command: create
        db_engine: postgres
        instance_name: "{{ tower_db_name }}"
        instance_type: db.m4.large
        size: 100
        username: "{{ tower_db_username }}"
        password: "{{ tower_db_password }}"
        port: "{{ tower_db_port }}"
        publicly_accessible: no
        vpc_security_groups: "{{ tower_db_security_group.group_id }}"
        subnet: "tower-{{ environment_name }}"
        tags:
          Name: "tower-{{ environment_name }}"
          Environment: "{{ environment_name }}"
        wait: yes
      register: tower_rds_instance

    - name: Create the Tower EC2 instance
      ec2:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        aws_region: "{{ ansible_aws_region }}"
        assign_public_ip: yes
        key_name: "{{ tower_demo_keypair_name }}"
        group: "tower-{{ environment_name }}"
        image: "{{ tower_ami }}"
        instance_type: m4.xlarge
        ebs_optimized: yes
        vpc_subnet_id: "{{ public_subnet_a_id }}"
        instance_tags:
          Name: "tower-{{ environment_name }}"
          Environment: "{{ environment_name }}"
        count_tag:
          Name: "tower-{{ environment_name }}"
          Environment: "{{ environment_name }}"
        exact_count: 1
        termination_protection: yes
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 150
            delete_on_termination: false
        wait: yes
      register: tower_instance

    - name: Allocate an EIP for the Tower EC2 instance
      ec2_eip:
        aws_access_key: "{{ ansible_aws_access_key }}"
        aws_secret_key: "{{ ansible_aws_secret_key }}"
        aws_region: "{{ ansible_aws_region }}"
        in_vpc: yes
        device_id: "{{ tower_instance.tagged_instances[0].id }}"
        release_on_disassociation: no
        state: present
      register: tower_eip

    - name: Wait for SSH access to the Tower server
      wait_for:
        port: 22
        host: "{{ tower_eip.public_ip }}"
        timeout: 320
        state: started

    - add_host:
        name: ansible-tower-sales-demo
        ansible_host: "{{ tower_eip.public_ip }}"
        groups: tower
        tower_db_endpoint: "{{ tower_rds_instance.instance.endpoint }}"
      changed_when: False

    - debug:
        msg: 'Tower IP: {{ tower_eip.public_ip }}'
